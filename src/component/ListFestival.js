import React, {Component} from 'react';
import {
  Text,
  ListView
} from 'react-native';

import {Container, Content, List, ListItem, Header, Title} from 'native-base';

import * as firebase from 'firebase';

import { Key } from '../config/Key';

var firebaseApp = firebase.initializeApp(Key.keys);

/* 
    --- Key.keys generated by Firebase (./src/config/config.js) ---
    export class Key {
      static keys = {
        apiKey: "API_KEY",
        authDomain: "AUTH_DOMAIN",
        databaseURL: "DATABASE_URL",
        storageBucket: "STORAGE_BUCKET"
      }
    }
*/

export default class ListFestival extends Component {


  constructor(props) {
    super(props);

    this.navFirst = this.navFirst.bind(this);
    this.renderList = this.renderList.bind(this);

    const dataSource = new ListView.DataSource({
      rowHasChanged: (row1, row2) => row1 !== row2,
    });
    this.state = {
      dataSource: dataSource
    };

    this.itemsRef = firebaseApp.database().ref();
  }

  componentDidMount() {
    this.listenForItems(this.itemsRef);
  }

  listenForItems(itemsRef) {
    itemsRef.on('value', (snap) => {

      var items = [];
      snap.forEach((child) => {
        items.push({
          data: child.val()
        });
      });

      this.setState({
        dataSource: this.state.dataSource.cloneWithRows(items)
      });

    });
  }

  renderList(rowData) {
    return (
      <ListItem button onPress={() => this.navFirst(rowData)}>
        <Text>{rowData.name}</Text>
      </ListItem>
    );
  }

  navFirst(rowData) {
    this.props.navigator.push({
      activeScreen: 'detailsScreen',
      filmData: {
        name: rowData.name,
        shortName: rowData.short_name,
        city: rowData.city,
        country: rowData.country,
        url: rowData.url
      }
    });
  }

  render() {
    return (
      <Container>
        <Header>
          <Title>
            Film Festivals
          </Title>
        </Header>
        <Content>
          <List dataArray={this.props.data}
                renderRow={this.renderList}/>
        </Content>
      </Container>
    );
  }
}